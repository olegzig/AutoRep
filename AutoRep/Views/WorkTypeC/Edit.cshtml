@model AutoRep.Models.WorkType

@{
    ViewData["Title"] = "Изменить";
}

<h1>Изменить</h1>

<h4>Услуга</h4>
<hr />

<form asp-action="Edit">
    <div class="row">
        <div asp-validation-summary="ModelOnly" class="text-danger col"></div>
        <div class="w-100"></div>
        <input type="hidden" asp-for="Id" />
        <div class="form-group col">
            <label asp-for="Name" class="control-label">Наименование</label>
            <input asp-for="Name" class="form-control" />
            <span asp-validation-for="Name" class="text-danger"></span>
        </div>
        <div class="form-group col">
            <label asp-for="Text" class="control-label">Описание</label>
            <input asp-for="Text" class="form-control" />
            <span asp-validation-for="Text" class="text-danger"></span>
        </div>
        <div class="w-100"></div>
        <div class="form-group col">
            <label asp-for="Cost" class="control-label">Стоимость</label>
            <div class="input-group">
                <input asp-for="Cost" class="form-control" />
                <div class="input-group-append">
                    <span class="input-group-text">BYN</span>
                </div>
            </div>
            <span asp-validation-for="Cost" class="text-danger"></span>
        </div>
    </div>
    <div class="form-group col px-0">
        <input type="submit" value="Сохранить" class="btn btn-primary" />
    </div>
</form>

<div>
    <a asp-action="Index">Назад</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
<script>

    $.validator.methods.range = function (value, element, param) {
        var globalizedValue = value.replace(",", ".");
        return this.optional(element) || (globalizedValue >= param[0] && globalizedValue <= param[1]);
    }

    $.validator.methods.number = function (value, element) {
        return this.optional(element) || /-?(?:\d+|\d{1,3}(?:[\s\.,]\d{3})+)(?:[\.,]\d+)?$/.test(value);
    }
</script>
}